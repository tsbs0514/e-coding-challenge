# Frontend Challenge 2 - Electric Simulation App
# Deploy to GitHub Pages
name: Deploy Electric Simulation App

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]
    paths:
      - "frontend_challenge_2/challenges/tsbs0514/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend_challenge_2/challenges/tsbs0514/package-lock.json"

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          static_site_generator: next
          # GitHub Pages subdirectory deployment
          base_path: "/e-coding-challenge"

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            frontend_challenge_2/challenges/tsbs0514/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('frontend_challenge_2/challenges/tsbs0514/package-lock.json') }}-${{ hashFiles('frontend_challenge_2/challenges/tsbs0514/**.[jt]s', 'frontend_challenge_2/challenges/tsbs0514/**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('frontend_challenge_2/challenges/tsbs0514/package-lock.json') }}-

      - name: Install dependencies
        working-directory: frontend_challenge_2/challenges/tsbs0514
        run: npm ci

      # Uncomment the following lines if you want to run E2E tests in CI
      # - name: Install Playwright browsers
      #   working-directory: frontend_challenge_2/challenges/tsbs0514
      #   run: npx playwright install chromium

      - name: Run tests
        working-directory: frontend_challenge_2/challenges/tsbs0514
        run: npm test

      # Uncomment the following lines if you want to run E2E tests in CI
      # - name: Run E2E tests
      #   working-directory: frontend_challenge_2/challenges/tsbs0514
      #   run: npm run test:e2e
      #   env:
      #     CI: true
      #   timeout-minutes: 5

      - name: Build with Next.js
        working-directory: frontend_challenge_2/challenges/tsbs0514
        run: npm run build

      - name: Debug build output
        working-directory: frontend_challenge_2/challenges/tsbs0514
        run: |
          echo "Build output directory contents:"
          ls -la out/
          echo "Checking for index.html:"
          find out/ -name "index.html" -type f

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend_challenge_2/challenges/tsbs0514/out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
